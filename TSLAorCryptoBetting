// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract PriceConsumerV3 {

    /**
     * How much the player has to bet
    */
    uint public contractBalance = 100;

    /**
     * Live Price Feed
    */
    AggregatorV3Interface internal priceFeed;

    /**
     * Predicted Asset Price
     */
    int public predictedAssetPrice;

    /**
     * Amount Player is betting
     */
    uint public betAmount;

    /**
     * Asset player is betting on
     */
    string public asset;

    /**
     * Latest Price
     */
    int public latestPrice;

    /**
     * Difference in Actual and Expected
     */
    int public difference;

    /**
     * Asset Oracle Addresses
     */
    address private OilAddr = 0x6292aA9a6650aE14fbf974E5029f36F95a1848Fd;
    address private ETHAddr = 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e;
    address private BTCAddr = 0xECe365B379E1dD183B20fc5f022230C044d51404;

    /**
     *  Contructor: initializes owner, initilizes the price feed
     */
    constructor() {
        priceFeed = AggregatorV3Interface(address(0));
    }

    /**
     *  Checks for a valid bet amount
     */
    modifier validBet (uint _amount) {
        require(_amount > 0 && contractBalance >= _amount, "Invalid Bet");
        _;
    }

    /**
     *  Places bet
     */
    function placeBet(int _prediction, string calldata _asset, uint _betAmount) public 
    validBet(_betAmount) {

        // gets latest price
        predictedAssetPrice = _prediction;
        betAmount = _betAmount;
        asset = _asset;
        latestPrice = getLatestPrice();
        

        getAccuracy();
        calculatePrize();
    }

    /**
     * Returns the latest price using chainlink oracle
     */
    function getLatestPrice() private returns (int) {
        if (keccak256(bytes(asset)) == keccak256(bytes("OIL"))){
            priceFeed = AggregatorV3Interface(OilAddr);
        }
    
        if (keccak256(bytes(asset)) == keccak256(bytes("ETH"))){
            priceFeed = AggregatorV3Interface(ETHAddr);
        }
    
        if (keccak256(bytes(asset)) == keccak256(bytes("BTC"))){
            priceFeed = AggregatorV3Interface(BTCAddr);
        }

        (
            uint80 roundID, 
            int price,
            uint startedAt,
            uint timeStamp,
            uint80 answeredInRound
        ) = priceFeed.latestRoundData();

        return price/10**8;
    }

    /**
     * finds the absolute value of the difference between your bet and the actual price
     */
    function getAccuracy() private {
        difference = latestPrice - predictedAssetPrice;
        difference = difference >= 0 ? difference : -difference;
    }

    /**
     * Calculates Prize
     */
    function calculatePrize() private {
        if (difference <= 10) {
            contractBalance += betAmount;
        }
        else {
            contractBalance -= betAmount;
        }
    }

}



